import React, { useState, useEffect } from "react";

import { useQuery } from "@tanstack/react-query";
import { Calendar, Users, Briefcase, TrendingUp, Phone, DollarSign, Clock, AlertCircle, ChevronDown } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { format } from "date-fns";
import { bg } from 'date-fns/locale';

export default function Dashboard() {
  const [todayExpanded, setTodayExpanded] = useState(true);
  const [activeExpanded, setActiveExpanded] = useState(true);
  const [leadsExpanded, setLeadsExpanded] = useState(true);

  const { data: companies = [] } = useQuery({
    queryKey: ['companies'],
    queryFn: () => stoic11.entities.Company.list('-updated_date'),
  });

  const { data: projects = [] } = useQuery({
    queryKey: ['projects'],
    queryFn: () => stoic11.entities.Project.list('-updated_date'),
  });

  const { data: meetings = [] } = useQuery({
    queryKey: ['meetings'],
    queryFn: () => stoic11.entities.Meeting.list('-meeting_date'),
  });

  const { data: leads = [] } = useQuery({
    queryKey: ['leads'],
    queryFn: () => stoic11.entities.Lead.list('-updated_date'),
  });

  const getTodayMeetings = () => {
    const today = new Date().toISOString().split('T')[0];
    return meetings.filter(meeting => meeting.meeting_date === today);
  };

  const getActiveProjects = () => {
    return projects.filter(project => project.status === 'in_progress');
  };

  const getNewLeads = () => {
    return leads.filter(lead => lead.status === 'new' || lead.status === 'contacted');
  };

  const getCompanyName = (companyId) => {
    const company = companies.find(c => c.id === companyId);
    return company ? company.company_name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è';
  };

  const todayMeetings = getTodayMeetings();
  const activeProjects = getActiveProjects();
  const newLeads = getNewLeads();

  // Calculate stats
  const totalRevenue = projects
    .filter(p => p.payment_status === 'paid')
    .reduce((sum, p) => sum + (p.total_value || 0), 0);

  const pendingRevenue = projects
    .filter(p => p.status === 'in_progress' || p.status === 'review')
    .reduce((sum, p) => sum + (p.total_value || 0), 0);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="mb-8 text-center"
        >
          <h1 className="text-5xl font-bold text-gray-900 mb-4">–î–æ–±—Ä–µ –¥–æ—à—ä–ª! üìä</h1>
          <p className="text-2xl text-gray-600">–ö–∞–∫ –≤—ä—Ä–≤–∏ –±–∏–∑–Ω–µ—Å—ä—Ç –¥–Ω–µ—Å?</p>
        </motion.div>

        {/* Quick Stats */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-12"
        >
          <Link to={createPageUrl("Companies")}>
            <Card className="hover:shadow-lg transition-shadow cursor-pointer bg-blue-50 border-0">
              <CardContent className="p-6">
                <div className="flex items-center justify-between mb-2">
                  <Users className="w-8 h-8 text-blue-600" />
                  <span className="text-3xl font-bold text-gray-900">{companies.length}</span>
                </div>
                <p className="text-sm font-medium text-gray-600">–ö–æ–º–ø–∞–Ω–∏–∏</p>
              </CardContent>
            </Card>
          </Link>

          <Link to={createPageUrl("Projects")}>
            <Card className="hover:shadow-lg transition-shadow cursor-pointer bg-purple-50 border-0">
              <CardContent className="p-6">
                <div className="flex items-center justify-between mb-2">
                  <Briefcase className="w-8 h-8 text-purple-600" />
                  <span className="text-3xl font-bold text-gray-900">{activeProjects.length}</span>
                </div>
                <p className="text-sm font-medium text-gray-600">–ê–∫—Ç–∏–≤–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∏</p>
              </CardContent>
            </Card>
          </Link>

          <Link to={createPageUrl("Leads")}>
            <Card className="hover:shadow-lg transition-shadow cursor-pointer bg-orange-50 border-0">
              <CardContent className="p-6">
                <div className="flex items-center justify-between mb-2">
                  <Phone className="w-8 h-8 text-orange-600" />
                  <span className="text-3xl font-bold text-gray-900">{newLeads.length}</span>
                </div>
                <p className="text-sm font-medium text-gray-600">–ù–æ–≤–∏ –∑–∞–ø–∏—Ç–≤–∞–Ω–∏—è</p>
              </CardContent>
            </Card>
          </Link>

          <Card className="hover:shadow-lg transition-shadow bg-green-50 border-0">
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-2">
                <DollarSign className="w-8 h-8 text-green-600" />
                <span className="text-3xl font-bold text-gray-900">{totalRevenue.toLocaleString('bg-BG')}</span>
              </div>
              <p className="text-sm font-medium text-gray-600">–ü—Ä–∏—Ö–æ–¥–∏ (–ª–≤)</p>
            </CardContent>
          </Card>
        </motion.div>

        {/* Main Content - Tri-fold Layout */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Today's Meetings */}
          <motion.div
            initial={{ opacity: 0, x: -50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6 }}
            className="bg-white rounded-2xl shadow-2xl p-6"
          >
            <div 
              className="flex items-center justify-between cursor-pointer"
              onClick={() => setTodayExpanded(!todayExpanded)}
            >
              <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-3">
                <Calendar className="w-8 h-8 text-blue-600" />
                –î–ù–ï–°
              </h2>
              <div className="flex items-center gap-2">
                <Badge className="bg-blue-100 text-blue-800 text-lg px-3 py-1">
                  {todayMeetings.length}
                </Badge>
                <motion.div animate={{ rotate: todayExpanded ? 180 : 0 }}>
                  <ChevronDown className="w-6 h-6 text-gray-600" />
                </motion.div>
              </div>
            </div>

            <AnimatePresence>
              {todayExpanded && (
                <motion.div
                  initial={{ height: 0, opacity: 0 }}
                  animate={{ height: 'auto', opacity: 1 }}
                  exit={{ height: 0, opacity: 0 }}
                  className="pt-4 space-y-4"
                >
                  {todayMeetings.length === 0 ? (
                    <div className="text-center py-12">
                      <Calendar className="w-20 h-20 text-gray-300 mx-auto mb-4" />
                      <p className="text-xl font-semibold text-gray-500 mb-2">–ù—è–º–∞ —Å—Ä–µ—â–∏ –¥–Ω–µ—Å</p>
                      <p className="text-gray-400">–°–≤–æ–±–æ–¥–µ–Ω –¥–µ–Ω!</p>
                    </div>
                  ) : (
                    todayMeetings.slice(0, 4).map((meeting) => (
                      <div key={meeting.id} className="border-2 border-gray-200 rounded-xl p-4 hover:bg-blue-50 transition-colors">
                        <div className="flex items-center gap-3 mb-2">
                          <div className="w-14 h-14 bg-blue-600 rounded-full flex items-center justify-center text-white font-bold text-lg">
                            {meeting.meeting_time || 'TBD'}
                          </div>
                          <div className="flex-1">
                            <p className="font-bold text-lg text-gray-900">{meeting.title}</p>
                            <p className="text-sm text-gray-600">{getCompanyName(meeting.company_id)}</p>
                          </div>
                        </div>
                        {meeting.location && (
                          <p className="text-xs text-gray-500 mt-2">üìç {meeting.location}</p>
                        )}
                      </div>
                    ))
                  )}
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>

          {/* Active Projects */}
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="bg-white rounded-2xl shadow-2xl p-6"
          >
            <div 
              className="flex items-center justify-between cursor-pointer"
              onClick={() => setActiveExpanded(!activeExpanded)}
            >
              <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-3">
                <Briefcase className="w-8 h-8 text-purple-600" />
                –ê–ö–¢–ò–í–ù–ò
              </h2>
              <div className="flex items-center gap-2">
                <Badge className="bg-purple-100 text-purple-800 text-lg px-3 py-1">
                  {activeProjects.length}
                </Badge>
                <motion.div animate={{ rotate: activeExpanded ? 180 : 0 }}>
                  <ChevronDown className="w-6 h-6 text-gray-600" />
                </motion.div>
              </div>
            </div>

            <AnimatePresence>
              {activeExpanded && (
                <motion.div
                  initial={{ height: 0, opacity: 0 }}
                  animate={{ height: 'auto', opacity: 1 }}
                  exit={{ height: 0, opacity: 0 }}
                  className="pt-4 space-y-4"
                >
                  {activeProjects.length === 0 ? (
                    <div className="text-center py-12">
                      <Briefcase className="w-20 h-20 text-gray-300 mx-auto mb-4" />
                      <p className="text-xl font-semibold text-gray-500 mb-2">–ù—è–º–∞ –∞–∫—Ç–∏–≤–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∏</p>
                      <p className="text-gray-400">–í—Ä–µ–º–µ –∑–∞ –Ω–æ–≤–∏ –ø—Ä–µ–¥–∏–∑–≤–∏–∫–∞—Ç–µ–ª—Å—Ç–≤–∞!</p>
                    </div>
                  ) : (
                    activeProjects.map((project) => (
                      <div key={project.id} className="border-2 border-purple-200 rounded-xl p-4 bg-purple-50">
                        <div className="flex items-center justify-between mb-2">
                          <div>
                            <p className="font-bold text-lg text-gray-900">{project.project_name}</p>
                            <p className="text-sm text-gray-600">{getCompanyName(project.company_id)}</p>
                          </div>
                        </div>
                        <div className="flex items-center justify-between mt-3">
                          <span className="text-xs text-purple-700">
                            ‚è± {project.actual_hours || 0}h / {project.estimated_hours}h
                          </span>
                          {project.total_value && (
                            <span className="text-sm font-bold text-green-600">
                              {project.total_value.toLocaleString('bg-BG')} –ª–≤
                            </span>
                          )}
                        </div>
                      </div>
                    ))
                  )}
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>

          {/* New Leads */}
          <motion.div
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.4 }}
            className="bg-white rounded-2xl shadow-2xl p-6"
          >
            <div 
              className="flex items-center justify-between cursor-pointer"
              onClick={() => setLeadsExpanded(!leadsExpanded)}
            >
              <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-3">
                <Phone className="w-8 h-8 text-orange-600" />
                –ó–ê–ü–ò–¢–í–ê–ù–ò–Ø
              </h2>
              <div className="flex items-center gap-2">
                <Badge className="bg-orange-100 text-orange-800 text-lg px-3 py-1">
                  {newLeads.length}
                </Badge>
                <motion.div animate={{ rotate: leadsExpanded ? 180 : 0 }}>
                  <ChevronDown className="w-6 h-6 text-gray-600" />
                </motion.div>
              </div>
            </div>

            <AnimatePresence>
              {leadsExpanded && (
                <motion.div
                  initial={{ height: 0, opacity: 0 }}
                  animate={{ height: 'auto', opacity: 1 }}
                  exit={{ height: 0, opacity: 0 }}
                  className="pt-4 space-y-4"
                >
                  {newLeads.length === 0 ? (
                    <div className="text-center py-12">
                      <Phone className="w-20 h-20 text-gray-300 mx-auto mb-4" />
                      <p className="text-xl font-semibold text-gray-500 mb-2">–ù—è–º–∞ –Ω–æ–≤–∏ –∑–∞–ø–∏—Ç–≤–∞–Ω–∏—è</p>
                      <p className="text-gray-400">–í—Å–∏—á–∫–æ –æ–±—Ä–∞–±–æ—Ç–µ–Ω–æ!</p>
                    </div>
                  ) : (
                    newLeads.slice(0, 4).map((lead) => (
                      <div key={lead.id} className="border-2 border-orange-200 rounded-xl p-4 bg-orange-50">
                        <div className="flex items-center justify-between mb-2">
                          <div>
                            <p className="font-bold text-lg text-gray-900">{lead.company_name}</p>
                            <p className="text-sm text-gray-600">{lead.contact_person}</p>
                          </div>
                          <Badge className={
                            lead.priority === 'urgent' ? 'bg-red-100 text-red-800' :
                            lead.priority === 'high' ? 'bg-orange-100 text-orange-800' :
                            'bg-gray-100 text-gray-800'
                          }>
                            {lead.priority}
                          </Badge>
                        </div>
                        <p className="text-xs text-gray-600 line-clamp-2 mt-2">
                          {lead.project_description}
                        </p>
                      </div>
                    ))
                  )}
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        </div>

        {/* Pending Revenue Alert */}
        {pendingRevenue > 0 && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.6 }}
            className="mt-8"
          >
            <Card className="bg-yellow-50 border-yellow-300 shadow-xl border-2">
              <CardContent className="p-6">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 bg-yellow-500 rounded-full flex items-center justify-center">
                    <TrendingUp className="w-8 h-8 text-white" />
                  </div>
                  <div className="flex-1">
                    <h3 className="text-2xl font-bold text-yellow-800">–û–ß–ê–ö–í–ê–ù–ò –ü–†–ò–•–û–î–ò</h3>
                    <p className="text-yellow-700 text-lg">
                      {pendingRevenue.toLocaleString('bg-BG')} –ª–≤ –æ—Ç –∞–∫—Ç–∏–≤–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∏
                    </p>
                  </div>
                  <Link to={createPageUrl("Projects")}>
                    <Button className="bg-yellow-600 hover:bg-yellow-700 text-white font-bold text-lg px-6 py-3">
                      –í–ò–ñ –ü–†–û–ï–ö–¢–ò
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </div>
    </div>
  );
